name: CI

on: [push, pull_request]

jobs:
  docker-build:
    name: Build Docker image

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Pull latest image
        run: docker pull zwsim/zws:latest
      - name: Build Docker image
        # run: docker buildx build --pull --tag zwsim/zws:latest --platform linux/amd64,linux/arm64 .
        run: docker buildx build --pull --tag zwsim/zws:latest --platform linux/amd64 .
  smoke-test:
    name: Smoke test

    runs-on: ubuntu-latest

    timeout-minutes: 15

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: password
          POSTGRES_DB: zws
        ports:
          - '5432:5432'
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Build
        run: yarn run build
      - name: Run database migrations
        run: yarn run migrations
        env:
          DATABASE_URL: postgres://test:password@localhost:5432/zws
      - name: Run smoke test
        run: yarn start
        env:
          SMOKE_TEST: true
          DATABASE_URL: postgres://test:password@localhost:5432/zws
        timeout-minutes: 1
  build:
    name: Build

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Build
        run: yarn run build
  lint:
    name: Lint

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Build
        run: yarn run build
      - name: Lint
        run: yarn run lint
  validate-prisma:
    name: Validate Prisma schema

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Validate Prisma schema
        run: yarn run prisma validate
        env:
          DATABASE_URL: postgresql://user:pass@localhost:5432/db
  lint-dockerfile:
    name: Lint Dockerfile

    runs-on: ubuntu-latest

    timeout-minutes: 5

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Lint Dockerfile
        uses: brpaz/hadolint-action@v1.5.0
        with:
          dockerfile: 'Dockerfile'
  style:
    name: Check style

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Check style
        run: yarn run style
  style-prisma:
    name: Check style of Prisma schema

    runs-on: ubuntu-latest

    timeout-minutes: 10

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Check style with Prisma CLI
        run: yarn run prisma format && git diff --exit-code -s prisma/schema.prisma
  deploy:
    name: Deploy

    runs-on: ubuntu-latest

    timeout-minutes: 30

    # Don't run this job if we aren't on main branch
    # `semantic-release` will do this automatically, but this saves us the time of building the image prior to that
    if: ${{ github.ref  == 'refs/heads/main' }}

    # TODO: uncomment this
    # needs: [build, docker-build, smoke-test, lint, lint-dockerfile, validate-prisma]

    steps:
      - name: Checkout git repository
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - name: Install dependencies with Yarn
        run: yarn install --immutable
      - name: Build
        run: yarn run build
      - name: Setup Git for committing
        run: |
          git config --global user.email "ci@zws.im"
          git config --global user.name "zws.im"
          git remote add github "https://$GITHUB_ACTOR@github.com/$GITHUB_REPOSITORY.git"
          git fetch github
      - name: Configure npm
        run: npm config set //registry.npmjs.org/:_authToken $NPM_TOKEN
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Update versions with changesets
        run: yarn changeset version
      - name: Publish with changesets
        run: |
          yarn changeset publish

          git add -A

          # Exit succesfully if no changes
          (git commit -m "build: release" && git push --follow-tags -u github main) || exit 0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
